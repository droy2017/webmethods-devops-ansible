---

### minimum params:
### cce_provisioning_target_hostgroups (type: string - the target ansible group to install the CCE template)
### cce_provisioning_installed_product_names (type: list - the products installed by the template so we can create the right services etc...)
### cce_provisioning_installed_product_envs_by_name (type: dictionary)
### cce_provisioning_postinstall_webmethods (type: boolean)
### cce_provisioning_postinstall_service_setup (type: boolean)
### cce_provisioning_postinstall_reboot (type: boolean)
### cce_provisioning_validation_ports (type: list)
### cce_provisioning_validation_ports_timeout (type: number)

- hosts: commandcentral
  become: true
  tasks:
    - name: Print the params for the webMethods post install tasks
      debug:
        msg: 
        - "Common webMethods postinstall tasks with params:"
        - "cce_provisioning_target_hostgroups = {{ cce_provisioning_target_hostgroups | default('undefined') }}"
        - "cce_provisioning_installed_product_names = {{ cce_provisioning_installed_product_names | default('undefined') }}"
        - "cce_provisioning_installed_product_instance_names = {{ cce_provisioning_installed_product_instance_names | default('undefined') }}"
        - "cce_provisioning_installed_product_envs_by_name = {{ cce_provisioning_installed_product_envs_by_name | default('undefined') }}"
        - "cce_provisioning_postinstall_webmethods = {{ cce_provisioning_postinstall_webmethods | default('undefined') }}"
        - "cce_provisioning_postinstall_service_setup = {{ cce_provisioning_postinstall_service_setup | default('undefined') }}"
        - "cce_provisioning_postinstall_reboot = {{ cce_provisioning_postinstall_reboot | default('undefined') }}"
        - "cce_provisioning_validation_ports = {{ cce_provisioning_validation_ports | default('undefined') }}"
        - "cce_provisioning_validation_ports_timeout = {{ cce_provisioning_validation_ports_timeout | default('undefined') }}"

##stop process before installing and starting the service
- hosts: "{{ cce_provisioning_target_hostgroups }}"
  tasks:
    - name: Root tasks
      block:
        # - name: Validate that SPM is running fine at this point
        #   wait_for:
        #     port: "{{ item }}"
        #     timeout: 300
        #   with_items:
        #     - 8092
        #     - 8093
        - import_role: 
            name: post-install-webmethods
          when: cce_provisioning_postinstall_webmethods|bool
          
        # ##BEGIN SPM service: this makes sure the SPM service is created with the right defaults
        # - import_role: 
        #     name: service-webmethods
        #   vars:
        #     product_command: "create"
        #     product_name: "spm"
        #     force_create: false
        #   when: cce_provisioning_postinstall_service_setup|bool
        # - import_role: 
        #     name: service-webmethods
        #   vars:
        #     product_command: "update"
        #     product_name: "spm"
        #     service_env: "{{ cce_provisioning_installed_product_envs_by_name }}"
        #   when: cce_provisioning_postinstall_service_setup|bool
        # - import_role: 
        #     name: command-webmethods
        #   vars:
        #     product_command: "stop"
        #     product_name: "spm"
        #   become: true
        #   become_user: "{{ webmethods_user }}"
        #   when: cce_provisioning_postinstall_service_setup|bool
        # - import_role: 
        #     name: service-webmethods
        #   vars:
        #     product_command: "restart"
        #     product_name: "spm"
        #   when: cce_provisioning_postinstall_service_setup|bool
        # ##END SPM service

        - import_role: 
            name: service-webmethods
          vars:
            product_command: "create"
            product_name: "{{ cce_provisioning_installed_product_names }}"
            product_instance_name: "{{ cce_provisioning_installed_product_instance_names }}"
            force_create: false
            service_user: "{{ webmethods_user }}"
          when: cce_provisioning_postinstall_service_setup|bool
        - import_role: 
            name: service-webmethods
          vars:
            product_command: "update"
            product_name: "{{ cce_provisioning_installed_product_names }}"
            product_instance_name: "{{ cce_provisioning_installed_product_instance_names }}"
            service_env: "{{ cce_provisioning_installed_product_envs_by_name }}"
          when: cce_provisioning_postinstall_service_setup|bool
        - import_role: 
            name: command-webmethods
          vars:
            product_command: "stop"
            product_name: "{{ cce_provisioning_installed_product_names }}"
            product_instance_name: "{{ cce_provisioning_installed_product_instance_names }}"
          become: true
          become_user: "{{ webmethods_user }}"
          when: cce_provisioning_postinstall_service_setup|bool
        - import_role: 
            name: service-webmethods
          vars:
            product_command: "restart"
            product_name: "{{ cce_provisioning_installed_product_names }}"
            product_instance_name: "{{ cce_provisioning_installed_product_instance_names }}"
          when: cce_provisioning_postinstall_service_setup|bool
        - name: "Reboot the machine ONLY IF postinstall_reboot set to true"
          reboot:
            reboot_timeout: 1000
          when: cce_provisioning_postinstall_reboot is defined and cce_provisioning_postinstall_reboot == true
      become: true
  tags:
    - "cce_provisioning.postinstall"

#check ports
- hosts: commandcentral
  become: true
  become_user: "{{ cce_owner }}"
  tasks:
    - import_role: 
        name: check-remote-ports
      vars:
        inventory_pattern: "{{ cce_provisioning_target_hostgroups }}"
        inventory_hosts_lookup_property: "ansible_host"
        validation_ports: "{{ cce_provisioning_validation_ports }}"
        validation_ports_timeout: "{{ cce_provisioning_validation_ports_timeout }}"
  tags:
    - "cce_provisioning.verify"