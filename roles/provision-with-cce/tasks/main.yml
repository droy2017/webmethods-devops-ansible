---

  - name: Print the all_hosts aliases to the console.
    debug: var=cce_provisioning_target_host_aliases
  
  - name: Print the all_hosts to the console.
    debug: var=cce_provisioning_target_hosts

  - name: Clear the all_hosts_computed fact
    set_fact:
      all_hosts_computed: []

  - name: Build a list of all the hosts based on aliases
    set_fact:
      all_hosts_computed: "{{ all_hosts_computed }} + [ '{{ hostvars[item].ansible_host }}' ]"
    with_items: "{{ cce_provisioning_target_host_aliases }}"
    when: cce_provisioning_target_host_aliases is defined and (cce_provisioning_target_host_aliases|length>0)

  - name: Build a list of all the hosts based on ansible hosts
    set_fact:
      all_hosts_computed: "{{ all_hosts_computed }} + [ '{{ item }}' ]"
    with_items: "{{ cce_provisioning_target_hosts }}"
    when: cce_provisioning_target_hosts is defined and (cce_provisioning_target_hosts|length>0)

  - name: Print the all_hosts to the console.
    debug: var=all_hosts_computed

  - name: Run provision hosts stack params
    command: ./scripts/provision_stack_setparams.sh {{ cce_owner }} {{ cce_provisioning_install_stackname }} {{ item.name }} {{ item.value }} {{ item.append }}
    args:
      chdir: "{{ cce_provisioning_path }}"
    with_items:
      - name: "TARGET_HOSTS"
        value: "[{{ all_hosts_computed | join(',') }}]"
        append: "false"
    when: all_hosts_computed is defined and (all_hosts_computed|length>0)

  - name: Run provision extra stack params
    command: ./scripts/provision_stack_setparams.sh {{ cce_owner }} {{ cce_provisioning_install_stackname }} {{ item.name }} {{ item.value }} true
    args:
      chdir: "{{ cce_provisioning_path }}"
    with_items: "{{ cce_provisioning_install_params }}"
    when: cce_provisioning_install_params is defined

  - name: Run provision stack
    command: ./scripts/provision_stack.sh {{ cce_owner }} {{ cce_provisioning_install_stackname }}
    async: 1000
    poll: 0
    args:
      chdir: "{{ cce_provisioning_path }}"
    register: provision_stack_sleeper

  - name: 'check on provision_stack async task'
    async_status:
      jid: "{{ provision_stack_sleeper.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 100
    delay: 10

  - name: Print the job_result to the console.
    debug: var=job_result.stdout_lines

  - name: Copy command result to the server
    copy:
      content: "{{ job_result.stdout }}"
      dest: "{{ ansible_env.HOME }}/provision_stack_{{ inventory_hostname }}_{{ cce_provisioning_install_stackname }}.out"